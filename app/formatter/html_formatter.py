"""
HTML formatter module for AI-powered MoM generator.

This module provides functionality for formatting structured MoM data
into HTML format.
"""

import logging
from typing import Any, Dict, Optional
from .base_formatter import BaseFormatter

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HtmlFormatter(BaseFormatter):
    """
    Formats MoM data into HTML.
    
    This class provides methods for formatting structured MoM data into
    a well-formatted HTML document.
    
    Attributes:
        config (Dict): Configuration options for the formatter
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Initialize the HtmlFormatter with optional configuration.
        
        Args:
            config (Dict, optional): Configuration options for the formatter
        """
        super().__init__(config)
        logger.info("HtmlFormatter initialized")
    
    def format(self, mom_data: Dict[str, Any]) -> str:
        """
        Format MoM data into HTML.
        
        Args:
            mom_data (Dict[str, Any]): Structured MoM data
            
        Returns:
            str: Formatted HTML
        """
        logger.info("Formatting MoM data as HTML")
        
        # Get CSS from config or use default
        css = self.config.get('css', self._default_css())
        
        # Get title
        title = mom_data.get('meeting_title', 'Minutes of Meeting')
        
        # Build HTML
        html = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
{css}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Minutes of Meeting</h1>
            <h2>{title}</h2>
            <p class="date-time">{mom_data.get('date_time', 'N/A')}</p>
        </header>
        
        <section class="attendees">
            <h3>Attendees</h3>
            <div class="content">
                {self._format_content(mom_data.get('attendees', 'N/A'))}
            </div>
        </section>
        
        <section class="agenda">
            <h3>Agenda</h3>
            <div class="content">
                {self._format_content(mom_data.get('agenda', 'N/A'))}
            </div>
        </section>
        
        <section class="discussion">
            <h3>Key Discussion Points</h3>
            <div class="content">
                {self._format_content(mom_data.get('discussion_points', 'N/A'))}
            </div>
        </section>
        
        <section class="action-items">
            <h3>Action Items</h3>
            <div class="content">
                {self._format_content(mom_data.get('action_items', 'N/A'))}
            </div>
        </section>
        
        <section class="decisions">
            <h3>Decisions Made</h3>
            <div class="content">
                {self._format_content(mom_data.get('decisions', 'N/A'))}
            </div>
        </section>
        
        <section class="next-steps">
            <h3>Next Steps</h3>
            <div class="content">
                {self._format_content(mom_data.get('next_steps', 'N/A'))}
            </div>
        </section>
        
        <footer>
            <p>Generated by AI-Powered MoM Generator</p>
        </footer>
    </div>
</body>
</html>"""
        
        return html
    
    def _format_content(self, content: str) -> str:
        """
        Format content for HTML display.
        
        Args:
            content (str): Raw content
            
        Returns:
            str: HTML-formatted content
        """
        if not content or content == 'N/A':
            return '<p>N/A</p>'
        
        # Convert line breaks to <br> tags
        content = content.replace('\n', '<br>')
        
        # Detect and format lists
        if '- ' in content or '* ' in content:
            lines = content.split('<br>')
            list_items = []
            in_list = False
            
            for line in lines:
                if line.strip().startswith(('- ', '* ')):
                    if not in_list:
                        list_items.append('<ul>')
                        in_list = True
                    list_items.append(f'<li>{line.strip()[2:]}</li>')
                else:
                    if in_list:
                        list_items.append('</ul>')
                        in_list = False
                    list_items.append(f'<p>{line}</p>')
            
            if in_list:
                list_items.append('</ul>')
            
            return ''.join(list_items)
        
        # Wrap in paragraph tags
        return f'<p>{content}</p>'
    
    def _default_css(self) -> str:
        """
        Get default CSS for HTML formatting.
        
        Returns:
            str: Default CSS
        """
        return """
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        
        header {
            border-bottom: 2px solid #eee;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin: 0 0 10px 0;
        }
        
        h2 {
            color: #3498db;
            margin: 0 0 10px 0;
        }
        
        h3 {
            color: #2c3e50;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        
        .date-time {
            color: #7f8c8d;
            font-style: italic;
        }
        
        section {
            margin-bottom: 20px;
        }
        
        .content {
            padding-left: 15px;
        }
        
        ul {
            margin-top: 5px;
        }
        
        footer {
            margin-top: 30px;
            padding-top: 10px;
            border-top: 1px solid #eee;
            color: #7f8c8d;
            font-size: 0.8em;
            text-align: center;
        }
        """