"""
Unit tests for the MoMFormatter class with branding support.
"""

import pytest
from unittest.mock import patch, MagicMock
from app.formatter.mom_formatter import MoMFormatter
from app.template.template_model import Template, BrandingElement

class TestMoMFormatterBranding:
    """Test cases for MoMFormatter class with branding support."""
    
    def setup_method(self):
        """Set up test fixtures."""
        # Create mock config with branding
        self.config = {
            "branding": {
                "logo": {
                    "path": "https://example.com/logo.png",
                    "position": "center",
                    "size": "large"
                },
                "colors": {
                    "primary": "#1a73e8",
                    "secondary": "#4285f4",
                    "background": "#ffffff",
                    "text": "#202124"
                },
                "font": "Roboto, Arial, sans-serif",
                "header": "<div class='custom-header'>Company Meeting Minutes</div>",
                "footer": "Generated by MoM Generator | Confidential"
            }
        }
        
        # Create formatter with branding config
        self.formatter = MoMFormatter(config=self.config)
        
        # Create a test template
        self.template = Template(
            name="Test Template",
            description="Test template for unit tests",
            format_type="html",
            content="""
<!DOCTYPE html>
<html>
<head>
    <title>{meeting_title}</title>
</head>
<body>
    <header>
        <h1>{meeting_title}</h1>
        <p>{date_time}</p>
    </header>
    <main>
        <section>
            <h2>Attendees</h2>
            <p>{attendees}</p>
        </section>
        <section>
            <h2>Agenda</h2>
            <p>{agenda}</p>
        </section>
        <section>
            <h2>Discussion Points</h2>
            <p>{discussion_points}</p>
        </section>
        <section>
            <h2>Action Items</h2>
            <p>{action_items}</p>
        </section>
        <section>
            <h2>Decisions</h2>
            <p>{decisions}</p>
        </section>
        <section>
            <h2>Next Steps</h2>
            <p>{next_steps}</p>
        </section>
    </main>
    <footer>
        <p>Meeting Minutes</p>
    </footer>
</body>
</html>
            """.strip(),
            sections=["meeting_title", "date_time", "attendees", "agenda", 
                     "discussion_points", "action_items", "decisions", "next_steps"]
        )
        
        # Create test MoM data
        self.mom_data = {
            "meeting_title": "Test Meeting",
            "date_time": "2023-01-01 10:00",
            "attendees": ["John Doe", "Jane Smith"],
            "agenda": ["Item 1", "Item 2"],
            "discussion_points": ["Discussion 1", "Discussion 2"],
            "action_items": [
                {"task": "Task 1", "assignee": "John Doe", "due": "2023-01-15"},
                {"task": "Task 2", "assignee": "Jane Smith", "due": "2023-01-20"}
            ],
            "decisions": ["Decision 1", "Decision 2"],
            "next_steps": ["Step 1", "Step 2"]
        }
    
    def test_initialize_branding(self):
        """Test initialization of branding elements from config."""
        # Verify branding elements were created
        assert self.formatter.default_branding is not None
        assert len(self.formatter.default_branding) > 0
        
        # Verify logo branding element
        logo_elements = [e for e in self.formatter.default_branding if e.type == "logo"]
        assert len(logo_elements) == 1
        logo = logo_elements[0]
        assert logo.value == "https://example.com/logo.png"
        assert logo.position == "center"
        assert logo.size == "large"
        
        # Verify color branding elements
        color_elements = [e for e in self.formatter.default_branding if e.type == "color"]
        assert len(color_elements) == 4
        
        # Verify font branding element
        font_elements = [e for e in self.formatter.default_branding if e.type == "font"]
        assert len(font_elements) == 1
        assert font_elements[0].value == "Roboto, Arial, sans-serif"
        
        # Verify header branding element
        header_elements = [e for e in self.formatter.default_branding if e.type == "header"]
        assert len(header_elements) == 1
        assert "Company Meeting Minutes" in header_elements[0].value
        
        # Verify footer branding element
        footer_elements = [e for e in self.formatter.default_branding if e.type == "footer"]
        assert len(footer_elements) == 1
        assert "Generated by MoM Generator" in footer_elements[0].value
    
    @patch('app.template.template_customizer.TemplateCustomizer.apply')
    def test_format_with_branding(self, mock_apply):
        """Test formatting MoM data with branding."""
        # Mock apply method
        mock_apply.return_value = "Formatted content with branding"
        
        # Format MoM data with branding
        result = self.formatter.format(self.mom_data, self.template, branding=self.formatter.default_branding)
        
        # Verify apply was called with correct parameters
        mock_apply.assert_called_once_with(self.template, self.mom_data, None, self.formatter.default_branding)
        
        # Verify result
        assert result == "Formatted content with branding"
    
    @patch('app.template.template_customizer.TemplateCustomizer.apply_with_template_name')
    def test_format_with_template_name_and_branding(self, mock_apply_with_template_name):
        """Test formatting MoM data using a template by name with branding."""
        # Mock apply_with_template_name method
        mock_apply_with_template_name.return_value = "Formatted content with branding"
        
        # Mock template manager
        template_manager = MagicMock()
        
        # Format MoM data with branding
        result = self.formatter.format_with_template_name(
            self.mom_data, "Test Template", template_manager, branding=self.formatter.default_branding
        )
        
        # Verify apply_with_template_name was called with correct parameters
        mock_apply_with_template_name.assert_called_once_with(
            "Test Template", self.mom_data, template_manager, "en", None, self.formatter.default_branding
        )
        
        # Verify result
        assert result == "Formatted content with branding"
    
    @patch('app.formatter.mom_formatter.MoMFormatter.format_with_template_name')
    @patch('app.formatter.mom_formatter.MoMFormatter.format_with_format_type')
    def test_format_to_file_with_branding(self, mock_format_with_format_type, mock_format_with_template_name):
        """Test formatting MoM data and saving to a file with branding."""
        # Mock format methods
        mock_format_with_format_type.return_value = "Formatted content with branding"
        mock_format_with_template_name.return_value = "Formatted content with template and branding"
        
        # Mock open function
        with patch('builtins.open', create=True) as mock_open:
            # Format MoM data and save to file with format type
            self.formatter.format_to_file(self.mom_data, "output.html")
            
            # Verify format_with_format_type was called with correct parameters
            mock_format_with_format_type.assert_called_once_with(
                self.mom_data, "html", self.formatter.template_manager, "en", self.formatter.default_branding
            )
            
            # Verify file was written
            mock_open.assert_called_once()
            
            # Reset mocks
            mock_format_with_format_type.reset_mock()
            mock_open.reset_mock()
            
            # Format MoM data and save to file with template name
            self.formatter.format_to_file(self.mom_data, "output.html", template_name="Test Template")
            
            # Verify format_with_template_name was called with correct parameters
            mock_format_with_template_name.assert_called_once_with(
                self.mom_data, "Test Template", self.formatter.template_manager, "en", self.formatter.default_branding
            )
            
            # Verify file was written
            mock_open.assert_called_once()
    
    @patch('app.template.template_model.TemplateManager.get_templates')
    @patch('app.template.template_model.TemplateManager.get_template')
    @patch('app.formatter.mom_formatter.MoMFormatter.format')
    def test_format_with_format_type_and_branding(self, mock_format, mock_get_template, mock_get_templates):
        """Test formatting MoM data using a template of a specific format type with branding."""
        # Mock get_templates method
        mock_get_templates.return_value = [self.template]
        
        # Mock get_template method
        mock_get_template.return_value = self.template
        
        # Mock format method
        mock_format.return_value = "Formatted content with branding"
        
        # Format MoM data with format type and branding
        result = self.formatter.format_with_format_type(
            self.mom_data, "html", branding=self.formatter.default_branding
        )
        
        # Verify get_templates was called with correct parameters
        mock_get_templates.assert_called_once_with("html")
        
        # Verify get_template was called with correct parameters
        mock_get_template.assert_called_once_with(self.template.name, "en")
        
        # Verify format was called with correct parameters
        mock_format.assert_called_once_with(self.mom_data, self.template, branding=self.formatter.default_branding)
        
        # Verify result
        assert result == "Formatted content with branding"
    
    def test_custom_branding_elements(self):
        """Test creating and using custom branding elements."""
        # Create custom branding elements
        custom_branding = [
            BrandingElement(
                name="logo",
                type="logo",
                value="https://example.com/custom-logo.png",
                position="right",
                size="small"
            ),
            BrandingElement(
                name="color.primary",
                type="color",
                value="#ff0000"
            ),
            BrandingElement(
                name="font",
                type="font",
                value="Times New Roman, serif"
            )
        ]
        
        # Mock format method
        with patch('app.template.template_customizer.TemplateCustomizer.apply') as mock_apply:
            mock_apply.return_value = "Formatted content with custom branding"
            
            # Format MoM data with custom branding
            result = self.formatter.format(self.mom_data, self.template, branding=custom_branding)
            
            # Verify apply was called with correct parameters
            mock_apply.assert_called_once_with(self.template, self.mom_data, None, custom_branding)
            
            # Verify result
            assert result == "Formatted content with custom branding"