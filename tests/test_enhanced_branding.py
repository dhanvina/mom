"""
Unit tests for enhanced branding features.
"""

import pytest
from unittest.mock import patch, MagicMock
from app.template.template_model import Template, BrandingElement
from app.template.template_customizer import TemplateCustomizer

class TestEnhancedBranding:
    """Test cases for enhanced branding features."""
    
    def setup_method(self):
        """Set up test fixtures."""
        self.customizer = TemplateCustomizer()
        
        # Create test MoM data
        self.mom_data = {
            "meeting_title": "Test Meeting",
            "date_time": "2023-01-01 10:00",
            "attendees": ["John Doe", "Jane Smith", "Bob Johnson"],
            "agenda": ["Item 1", "Item 2", "Item 3"],
            "discussion_points": ["Discussion 1", "Discussion 2"],
            "action_items": [
                {"description": "Task 1", "assignee": "John Doe", "deadline": "2023-01-15", "status": "pending"},
                {"description": "Task 2", "assignee": "Jane Smith", "deadline": "2023-01-20", "status": "in_progress"}
            ],
            "decisions": [
                {"decision": "Decision 1", "context": "Context for decision 1"},
                {"decision": "Decision 2", "context": "Context for decision 2"}
            ],
            "next_steps": ["Step 1", "Step 2"]
        }
        
        # Create test HTML template
        self.html_template = Template(
            name="Test HTML Template",
            description="Test HTML template for branding",
            format_type="html",
            content="""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{meeting_title}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        
        header {
            border-bottom: 2px solid #eee;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin: 0 0 10px 0;
        }
        
        h2 {
            color: #3498db;
            margin: 0 0 10px 0;
        }
        
        h3 {
            color: #2c3e50;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        
        .date-time {
            color: #7f8c8d;
            font-style: italic;
        }
        
        section {
            margin-bottom: 20px;
        }
        
        .content {
            padding-left: 15px;
        }
        
        footer {
            margin-top: 30px;
            padding-top: 10px;
            border-top: 1px solid #eee;
            color: #7f8c8d;
            font-size: 0.8em;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Minutes of Meeting</h1>
            <h2>{meeting_title}</h2>
            <p class="date-time">{date_time}</p>
        </header>
        
        <section>
            <h3>Attendees</h3>
            <div class="content">
                {attendees}
            </div>
        </section>
        
        <section>
            <h3>Agenda</h3>
            <div class="content">
                {agenda}
            </div>
        </section>
        
        <section>
            <h3>Key Discussion Points</h3>
            <div class="content">
                {discussion_points}
            </div>
        </section>
        
        <section>
            <h3>Action Items</h3>
            <div class="content">
                {action_items}
            </div>
        </section>
        
        <section>
            <h3>Decisions Made</h3>
            <div class="content">
                {decisions}
            </div>
        </section>
        
        <section>
            <h3>Next Steps</h3>
            <div class="content">
                {next_steps}
            </div>
        </section>
        
        <footer>
            <p>Generated by AI-Powered MoM Generator</p>
        </footer>
    </div>
</body>
</html>
            """,
            sections=["meeting_title", "date_time", "attendees", "agenda", 
                     "discussion_points", "action_items", "decisions", "next_steps"]
        )
        
        # Create test Markdown template
        self.markdown_template = Template(
            name="Test Markdown Template",
            description="Test Markdown template for branding",
            format_type="markdown",
            content="""
# Minutes of Meeting: {meeting_title}

**Date & Time:** {date_time}

## Attendees

{attendees}

## Agenda

{agenda}

## Key Discussion Points

{discussion_points}

## Action Items

{action_items}

## Decisions Made

{decisions}

## Next Steps

{next_steps}
            """,
            sections=["meeting_title", "date_time", "attendees", "agenda", 
                     "discussion_points", "action_items", "decisions", "next_steps"]
        )
    
    def test_logo_branding(self):
        """Test applying logo branding to HTML template."""
        # Create logo branding element
        logo = BrandingElement(
            name="company_logo",
            type="logo",
            value="https://example.com/logo.png",
            position="right",
            size="large"
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.html_template, self.mom_data, branding=[logo])
        
        # Verify logo was added
        assert 'src="https://example.com/logo.png"' in result
        assert 'class="logo"' in result
        assert 'style="max-height: 150px; max-width: 100%;"' in result
        assert 'text-align: right;' in result
    
    def test_header_branding_html(self):
        """Test applying header branding to HTML template."""
        # Create header branding element
        header = BrandingElement(
            name="custom_header",
            type="header",
            value="<div class='company-header'>ACME Corporation</div>",
            css_class="branded-header"
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.html_template, self.mom_data, branding=[header])
        
        # Verify header was replaced
        assert '<header class="branded-header">' in result
        assert '<div class=\'company-header\'>ACME Corporation</div>' in result
    
    def test_header_branding_markdown(self):
        """Test applying header branding to Markdown template."""
        # Create header branding element
        header = BrandingElement(
            name="custom_header",
            type="header",
            value="ACME Corporation Meeting Minutes"
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.markdown_template, self.mom_data, branding=[header])
        
        # Verify header was replaced
        assert '# ACME Corporation Meeting Minutes' in result
    
    def test_footer_branding_html(self):
        """Test applying footer branding to HTML template."""
        # Create footer branding element
        footer = BrandingElement(
            name="custom_footer",
            type="footer",
            value="<div>© 2023 ACME Corporation. All rights reserved.</div>",
            css_class="branded-footer"
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.html_template, self.mom_data, branding=[footer])
        
        # Verify footer was replaced
        assert '<footer class="branded-footer">' in result
        assert '<div>© 2023 ACME Corporation. All rights reserved.</div>' in result
    
    def test_footer_branding_markdown(self):
        """Test applying footer branding to Markdown template."""
        # Create footer branding element
        footer = BrandingElement(
            name="custom_footer",
            type="footer",
            value="© 2023 ACME Corporation. All rights reserved."
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.markdown_template, self.mom_data, branding=[footer])
        
        # Verify footer was added
        assert '---\n\n© 2023 ACME Corporation. All rights reserved.' in result
    
    def test_color_scheme_branding(self):
        """Test applying color scheme branding to HTML template."""
        # Create color scheme branding elements
        primary_color = BrandingElement(
            name="color.primary",
            type="color",
            value="#FF5733"
        )
        secondary_color = BrandingElement(
            name="color.secondary",
            type="color",
            value="#33FF57"
        )
        background_color = BrandingElement(
            name="color.background",
            type="color",
            value="#F8F8F8"
        )
        
        # Apply branding to template
        result = self.customizer.apply(
            self.html_template, 
            self.mom_data, 
            branding=[primary_color, secondary_color, background_color]
        )
        
        # Verify color CSS was added
        assert ':root {' in result
        assert '--primary-color: #FF5733;' in result
        assert '--secondary-color: #33FF57;' in result
        assert '--background-color: #F8F8F8;' in result
        assert 'h1, h2, h3 { color: var(--primary-color); }' in result
        assert 'body { background-color: var(--background-color); }' in result
    
    def test_font_branding(self):
        """Test applying font branding to HTML template."""
        # Create font branding element
        font = BrandingElement(
            name="company_font",
            type="font",
            value="'Roboto'"
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.html_template, self.mom_data, branding=[font])
        
        # Verify font CSS was added
        assert "body, html { font-family: 'Roboto', sans-serif; }" in result
    
    def test_multiple_branding_elements(self):
        """Test applying multiple branding elements to HTML template."""
        # Create branding elements
        logo = BrandingElement(
            name="company_logo",
            type="logo",
            value="https://example.com/logo.png"
        )
        header = BrandingElement(
            name="custom_header",
            type="header",
            value="<div>ACME Corporation</div>"
        )
        footer = BrandingElement(
            name="custom_footer",
            type="footer",
            value="<div>© 2023 ACME Corporation</div>"
        )
        primary_color = BrandingElement(
            name="color.primary",
            type="color",
            value="#FF5733"
        )
        font = BrandingElement(
            name="company_font",
            type="font",
            value="'Roboto'"
        )
        
        # Apply branding to template
        result = self.customizer.apply(
            self.html_template, 
            self.mom_data, 
            branding=[logo, header, footer, primary_color, font]
        )
        
        # Verify all branding elements were applied
        assert 'src="https://example.com/logo.png"' in result
        assert '<header class="custom-header"><div>ACME Corporation</div></header>' in result
        assert '<footer class="custom-footer"><div>© 2023 ACME Corporation</div></footer>' in result
        assert '--primary-color: #FF5733;' in result
        assert "body, html { font-family: 'Roboto', sans-serif; }" in result
    
    def test_branding_with_html_attributes(self):
        """Test applying branding with HTML attributes."""
        # Create logo branding element with HTML attributes
        logo = BrandingElement(
            name="company_logo",
            type="logo",
            value="https://example.com/logo.png",
            html_attributes={"data-test": "logo", "title": "Company Logo"}
        )
        
        # Apply branding to template
        result = self.customizer.apply(self.html_template, self.mom_data, branding=[logo])
        
        # Verify HTML attributes were added
        assert 'data-test="logo"' in result
        assert 'title="Company Logo"' in result
    
    def test_branding_with_format_specific_settings(self):
        """Test applying branding with format-specific settings."""
        # Create header branding element with format-specific settings
        header = BrandingElement(
            name="custom_header",
            type="header",
            value="ACME Corporation",
            format_specific={
                "html": "<div class='company-name'>ACME Corporation</div>",
                "markdown": "# ACME Corporation #",
                "pdf": "ACME Corporation"
            }
        )
        
        # Apply branding to HTML template
        html_result = self.customizer.apply(self.html_template, self.mom_data, branding=[header])
        
        # Apply branding to Markdown template
        markdown_result = self.customizer.apply(self.markdown_template, self.mom_data, branding=[header])
        
        # Verify format-specific content was used
        assert "ACME Corporation" in html_result
        assert "ACME Corporation" in markdown_result